%% urineCalibration.m
% 
% This is a script to read in a spreadsheet that several volumes and repeats of uL-pixel pair data, and then
% generate 2nd-order polynomial coefficients. The spreadsheet is generated by pipetting different
% volumes of urine on your blotting paper, and then running the "SmufAnalysis" scripts on it to get the
% corresponding pixel counts for a particular paper/light/camera setup.
%
% Author: Jason Keller
% Date: June 2018
% 
% please cite: Keller, Stowers et al, Nature Neuroscience, 2018

%%
close all; clear all;
xlsPath = 'C:\Users\keller\School\UCSD\stowersLab\data\behaviorVideoUsv\2016_01_urineCalibration\'; %path to spreadsheet
filename = [xlsPath, 'urineCal.xlsx'];
fontSz = 20;

numRepeats = 5;
numVolumes = 7;

microliters = zeros(numVolumes*numRepeats,1);
pixels = zeros(numVolumes*numRepeats,1);

excelData = xlsread(filename);

for k = 1:numVolumes
    pixels((((k-1)*numRepeats)+1):(((k-1)*numRepeats)+numRepeats)) = excelData(2:numRepeats+1,k)';
    microliters((((k-1)*numRepeats)+1):(((k-1)*numRepeats)+numRepeats)) = repmat(excelData(1, k),numRepeats,1);
end

scatter(microliters, pixels);  
hold on;
xlabel('urine amount (uL)', 'FontSize', fontSz, 'FontName', 'Arial');
ylabel('urine pixels detected', 'FontSize', fontSz, 'FontName', 'Arial');

p = polyfit(microliters, pixels, 2); %use second order for polynomial fit, found by trial-and-error
f = polyval(p, 1:1:64);
plot(1:1:64,f,'k-','LineWidth',3)

% these are the coefficients to plug into the "PixelsToMicroliters.m" function:
a = p(1);
b = p(2);
c = p(3);
polyfit_str = ['y = ' num2str(a) ' *x^2 + ' num2str(b) ' *x + ' num2str(c)];
text(10,1600,polyfit_str, 'FontSize', fontSz, 'FontName', 'Arial');
hold off;



